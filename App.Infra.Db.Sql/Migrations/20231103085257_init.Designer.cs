// <auto-generated />
using System;
using App.Infra.Db.Sql.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Db.Sql.Migrations
{
    [DbContext(typeof(MarketPlaceContext))]
    [Migration("20231103085257_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Entities.Auctions.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BothId")
                        .HasColumnType("int");

                    b.Property<int>("BothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Endtime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<double>("LastPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("datetime");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Auction");

                    b.HasIndex("BothId");

                    b.HasIndex("BothProductId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auctions.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK_Bits");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Descriotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Comment");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Image");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Privince");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<double>("PriceSum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BothProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("PriceSum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BothProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_OrderStatus");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuprior")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_Boths");

                    b.HasIndex("CityId");

                    b.HasIndex("ImageId");

                    b.ToTable("Booths");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.BoothProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BothId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'در انتظار تایید')");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ProductBooth");

                    b.HasIndex("BothId");

                    b.HasIndex("ProductId");

                    b.ToTable("BoothProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Category");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.CategoryAttributeTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AttributeTitle");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryAttributeTitles");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BasePrice")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AttributeValue");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothProductId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ProductImage");

                    b.HasIndex("BoothProductId");

                    b.HasIndex("ImageId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PostalCode")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("provinceId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "WalletId" }, "UC_Person")
                        .IsUnique()
                        .HasFilter("[WalletId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Customer");

                    b.HasIndex("ImageId");

                    b.HasIndex(new[] { "UserId" }, "UC_Person2")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.MedalStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MedalStatus", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Medal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Seller");

                    b.HasIndex("Medal");

                    b.HasIndex(new[] { "UserId" }, "UC_Person3")
                        .IsUnique();

                    b.HasIndex(new[] { "BoothId" }, "UC_Person4")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.WalletHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSellerFees")
                        .HasColumnType("bit");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_WalletHistory");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auctions.Auction", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Booth", "Both")
                        .WithMany("Auctions")
                        .HasForeignKey("BothId")
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Boths");

                    b.HasOne("App.Domain.Core.Entities.Products.BoothProduct", "BothProduct")
                        .WithMany("Auctions")
                        .HasForeignKey("BothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Auction_ProductBooth");

                    b.HasOne("App.Domain.Core.Entities.Users.Customer", "Winner")
                        .WithMany("Auctions")
                        .HasForeignKey("WinnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Customers");

                    b.Navigation("Both");

                    b.Navigation("BothProduct");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auctions.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Auctions.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .IsRequired()
                        .HasConstraintName("FK_Bits_Auction");

                    b.HasOne("App.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Bids")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Bits_Customer");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.City", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Generals.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_Privince");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.BoothProduct", "BoothProduct")
                        .WithMany("Comments")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_ProductBooth");

                    b.HasOne("App.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Customer");

                    b.HasOne("App.Domain.Core.Entities.Orders.Order", "Order")
                        .WithMany("Comments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Orders");

                    b.Navigation("BoothProduct");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customer");

                    b.HasOne("App.Domain.Core.Entities.Orders.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_OrderStatus");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.OrderLine", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.BoothProduct", "BothProduct")
                        .WithMany("OrderLines")
                        .HasForeignKey("BothProductId")
                        .HasConstraintName("FK_OrderLines_ProductBooth");

                    b.HasOne("App.Domain.Core.Entities.Orders.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderLines_Orders");

                    b.Navigation("BothProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Booth", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Generals.City", "City")
                        .WithMany("Booths")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Boths_Cities");

                    b.HasOne("App.Domain.Core.Entities.Generals.Image", "Image")
                        .WithMany("Booths")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_Booths_Images");

                    b.Navigation("City");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.BoothProduct", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Booth", "Both")
                        .WithMany("BoothProducts")
                        .HasForeignKey("BothId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBooth_Boths");

                    b.HasOne("App.Domain.Core.Entities.Products.Product", "Product")
                        .WithMany("BoothProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBooth_Products");

                    b.Navigation("Both");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Category", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.CategoryAttributeTitle", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Category", "Category")
                        .WithMany("CategoryAttributeTitles")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_AttributeTitle_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Product", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.CategoryAttributeTitle", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_AttributeValue_AttributeTitle");

                    b.HasOne("App.Domain.Core.Entities.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AttributeValue_Products");

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.ProductImage", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.BoothProduct", "BoothProduct")
                        .WithMany("ProductImages")
                        .HasForeignKey("BoothProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImage_ProductBooth");

                    b.HasOne("App.Domain.Core.Entities.Generals.Image", "Image")
                        .WithMany("ProductImages")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImage_Image");

                    b.Navigation("BoothProduct");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Address", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Generals.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_Cities");

                    b.HasOne("App.Domain.Core.Entities.Generals.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_Privince");

                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_AppUser");

                    b.Navigation("City");

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.AppUser", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.Wallet", "Wallet")
                        .WithOne("AppUser")
                        .HasForeignKey("App.Domain.Core.Entities.Users.AppUser", "WalletId")
                        .HasConstraintName("FK_AppUser_Wallets");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Generals.Image", "Image")
                        .WithMany("Customers")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Images");

                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.Entities.Users.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_AppUser");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Seller", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Products.Booth", "Booth")
                        .WithOne("Seller")
                        .HasForeignKey("App.Domain.Core.Entities.Users.Seller", "BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Booths");

                    b.HasOne("App.Domain.Core.Entities.Users.MedalStatus", "MedalNavigation")
                        .WithMany("Sellers")
                        .HasForeignKey("Medal")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_MedalStatus");

                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", "User")
                        .WithOne("Seller")
                        .HasForeignKey("App.Domain.Core.Entities.Users.Seller", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_AppUser");

                    b.Navigation("Booth");

                    b.Navigation("MedalNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.WalletHistory", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.Wallet", "Wallet")
                        .WithMany("WalletHistories")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletHistory_Wallets");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auctions.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Booths");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Image", b =>
                {
                    b.Navigation("Booths");

                    b.Navigation("Customers");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Generals.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Orders.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Booth", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("BoothProducts");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.BoothProduct", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Comments");

                    b.Navigation("OrderLines");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Category", b =>
                {
                    b.Navigation("CategoryAttributeTitles");

                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.CategoryAttributeTitle", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Products.Product", b =>
                {
                    b.Navigation("BoothProducts");

                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.MedalStatus", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Wallet", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("WalletHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
